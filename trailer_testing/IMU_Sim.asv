fs=10;
dt=1/fs;
IMU = imuSensor('accel-gyro','SampleRate',fs);
g=9.81;
acc_specs=accelparams('MeasurementRange', 15*g, ...
    'NoiseDensity',40e-6*g);
gyro_specs=gyroparams('MeasurementRange',deg2rad(430) ...
    ,'NoiseDensity',deg2rad(0.3)/3600);
IMU.Accelerometer=acc_specs;
IMU.Gyroscope=gyro_specs;
%% Defining ground truth and IMU output
runtime=100;
N=runtime*fs;
t = (0:(N-1))/IMU.SampleRate;
accBody=zeros(N,3);
angVelBody=zeros(N,3);
% Define acceleration and angular velocity
firstLoopNumSamples = N*0.4;
secondLoopNumSamples = N*0.6;
totalNumSamples = firstLoopNumSamples + secondLoopNumSamples;
accBody(1:firstLoopNumSamples,1)=1;
accBody(firstLoopNumSamples+1:end,1)=-1;
accBody(1:firstLoopNumSamples,2)=-1;
accBody(firstLoopNumSamples+1:end,2)=1;
angVelBody(:,3) = 0;
% angVelBody(1:firstLoopNumSamples,3)=0;
% angVelBody(firstLoopNumSamples+1:end,3)=0;

[accReading,gyroReading]=IMU(accBody,angVelBody);
accReading(:,3)=accReading(:,3) - g;
accReading=-accReading;
traj = kinematicTrajectory('SampleRate',fs);
[positionNED,orientationNED,velocityNED,accNED,angVelNED] = traj(accBody,angVelBody);

% accReading(1:20,:)
%% March time

N=length(accBody);
quat=ones(N,1,'quaternion');
pos=zeros(N,3);
vel=zeros(N,3);
acc=zeros(N,3);
% initialize the system state. When attitude is quaternion(1,0,0,0),
% the global acc is the local acc.
quat(1)=quaternion(1,0,0,0);
pos(1,:)=[0,0,0];
vel(1,:)=[0,0,0];
acc(1,:)=accReading(1,:);
for i=1:N-1
    [quat(i+1),pos(i+1,:),vel(i+1,:),acc(i,:)]=March_time(quat(i),vel(i,:),pos(i,:),accBody(i,:),angVelBody(i,:),dt);
end

%% Raw
traj1 = kinematicTrajectory('SampleRate',fs);
[positionRaw,orientationRaw,velocityRaw,accRaw,angVelRaw] = traj1(accReading,gyroReading);

%% KF
kf=KF();
kf.sg2 = power(IMU.Gyroscope.NoiseDensity(1),2)*fs;
kf.sa2 = power(IMU.Accelerometer.NoiseDensity(1),2)*fs;
kf.g=[0;0;0];
kf.x=zeros(10,1);
kf.x(1)=1;
kf.P = zeros(9,9);
rng(1); % control the random number (seed)
quat=zeros(N,4);
pos=zeros(N,3);
vel=zeros(N,3);
err_v=zeros(N,3);
err_p=zeros(N,3);
z_gps=zeros(3,N);
for i=1:N
    quat(i,:) = kf.q;
    pos(i,:) = kf.p;
    vel(i,:) = kf.v;
    err_v(i,:) = sqrt(diag(kf.P(7:9,7:9)));
    err_p(i,:) = sqrt(diag(kf.P(4:6,4:6)));
%     z=[angVelBody(i,:),accBody(i,:)].';
    z = [gyroReading(i,:),accReading(i,:)].';
    kf.propagate(z,dt);
    R_gps = eye(3)*0.5;
    z_gps(:,i) = positionNED(i,:).' + R_gps*randn(3,1);
    kf.update(z_gps(:,i), R_gps);
end
%%

%%
% for i=1:100
%     orientationNED(i)
% end
std(z_gps(index,:))
std(pos(:,index))
%% Check if std converted by noise density equal to std
% no, the former is 2/3 of the later.
temp=IMU.Accelerometer.NoiseDensity*sqrt(fs)
% temp(3)
std(accReading(:,3))
% mean(acc(:,3))/2*10000
% pos(end,3)
%% plot imu
f=figure(1);
f.Position=[500 200 1600 900];
subplot(2,1,1)
plot(t,accReading)
legend('X-axis','Y-axis','Z-axis')
title('Accelerometer Readings')
ylabel('Acceleration (m/s^2)')

subplot(2,1,2)
plot(t,gyroReading)
legend('X-axis','Y-axis','Z-axis')
title('Gyroscope Readings')
ylabel('Angular Velocity (rad/s)')
%%
index=2;
f=figure(2);

f.Position=[500 200 1600 900];

% upper = vel+err_v;
% lower = vel-err_v;

% upper = pos+err_p;
% lower = pos-err_p;
% plot(t,z_gps(index,:));
% hold on;
% plot(t,positionRaw(:,index), 'LineWidth', 2);
% plot(t,pos(:,index));
% plot(t,positionNED(:,index), 'LineWidth', 2);

% fill([t, fliplr(t)], [upper(:,index).', fliplr(lower(:,index).')], 'r', 'FaceAlpha', 0.3, 'EdgeColor', 'none');
% hold off;
xlabel('t (sec)',"FontSize",16)
ylabel('y-position (m)',"FontSize",16)


eul=quat2eul(orientationNED);
plot(t,eul(:,1),'DisplayName','ground truth')
hold on;
eul=quat2eul(quaternion(quat));
plot(t,eul(:,1),'DisplayName','KF')
eul=quat2eul(orientationRaw);
plot(t,eul(:,1),'--','DisplayName','Raw')
hold off;
legend("FontSize",18)
ax = gca;
ax.FontSize = 14;
grid on;
%%
positionNED(1:10,2)
pos(1:10,2)
%% check if March_time is equivalent to kinematicTrajectory
for i=1:N
    if velocityNED(i,:)~=vel(i,:)
        disp('no ');
        break;
    end
end
i
%% Kalman filter using the Kalman_Filter function
L=13; %% length of the system state vector
X=zeros(N,L);
Xp=zeros(N,L);
P_x=zeros(N,L);
meas_cov=zeros(6,1);
Q=zeros(L,1);

variance_theta=power(IMU.Gyroscope.NoiseDensity(1)*sqrt(fs)*dt,2);
variance_acc=power(IMU.Accelerometer.NoiseDensity(1)*sqrt(fs)*dt,2);
meas_cov(1:3,1)=variance_theta/dt;
meas_cov(4:6,1)=variance_acc;
meas_cov=diag(meas_cov);
for i=1:N-1
    z=[gyroReading(i+1,:),accReading(i+1,:)];
    z=z.';
    if i==1
        X(1,1)=1;
        X(1,11:13)=accReading(i,:);
        theta=norm(z(1:3,1))*dt;
        if theta~=0
            vi=z(1,1)/theta*dt;
            vj=z(2,1)/theta*dt;
            vk=z(3,1)/theta*dt;
        else
            vi=0;
            vj=0;
            vk=0;
        end
        P_x(i,1)=sin(theta)^2*variance_theta;
        P_x(i,2)=cos(theta)^2*variance_theta*vi;
        P_x(i,3)=cos(theta)^2*variance_theta*vj;
        P_x(i,4)=cos(theta)^2*variance_theta*vk;
        P_x(i,5)=(variance_acc*dt^4)*5/4;
        P_x(i,6)=P_x(i,5);
        P_x(i,7)=P_x(i,5);
        P_x(i,8)=variance_acc*dt^2;
        P_x(i,9)=P_x(i,8);
        P_x(i,10)=P_x(i,8);
        P_x(i,11)=variance_acc;
        P_x(i,12)=variance_acc;
        P_x(i,13)=variance_acc;
        P=diag(P_x(1,:));
        Q=diag(Q);
    end
    [X(i+1,:),P,Xp(i,:)]=Kalman_Filter(z,X(i,:),P,meas_cov,Q,dt);
    P_x(i+1,:)=diag(P);
end
%%
[temp1,~,temp3]=Kalman_Filter(z,X(6,:),P,meas_cov,Q,dt)
get_angle(quat2rotm(quaternion(temp1(1:4).')))/180*pi
%% funct Kalman Filter
function [X,P,Xp]=Kalman_Filter(z,X,P,meas_cov,Q,dt)
w=z(1:3,1);
w_norm=norm(w);
if w_norm~=0
    integrator0=quaternion(cos(w_norm/2*dt),w(1)/w_norm*sin(w_norm/2*dt),w(2)/w_norm*sin(w_norm/2*dt),w(3)/w_norm*sin(w_norm/2*dt));
else
    integrator0=quaternion(1,0,0,0);
end
[q1,q2,q3,q4]=parts(integrator0);
A=zeros(13,13);
A(1:4,1:4)=[q1,-q2,-q3,-q4;q2,q1,-q4,q3;q3,q4,q1,-q2;q4,-q3,q2,q1];
for i=5:length(A)
    A(i,i)=1;
end
for i=1:6
    A(i+4,i+7)=dt;
end
for i=1:3
    A(i+4,i+10)=dt*dt/2;
end
X=X.';
Rotm=quat2rotm(quaternion(X(1,1),X(2,1),X(3,1),X(4,1)));
X(11:13,1)=Rotm*z(4:6,1);

Xp=A*X;
get_angle(quat2rotm(quaternion(Xp(1:4,1).')))/180*pi;
Pp=A*P*transpose(A) + Q;
H=get_H(w*dt,Rotm);
K=Pp*transpose(H)/(H*P*transpose(H)+meas_cov);
v=Xp(2:4)/norm(Xp(2:4));
rot_theta=atan2(norm(Xp(2:4)),Xp(1))*2;
h_Xp=[v*rot_theta/dt;Rotm.'*Xp(11:13)];
X=Xp+K*(z-h_Xp);
X(1:4)=X(1:4)/norm(X(1:4));
P=Pp-K*H*Pp;
end
%% funct get state to measurement matrix
function H=get_H(theta_vec,Rotm)
theta=norm(theta_vec);
theta=theta/2;
H=zeros(6,13);

if theta~=0
    vi=theta_vec(1)/theta;
    vj=theta_vec(2)/theta;
    vk=theta_vec(3)/theta;
    H(1,1)=-vi/sin(theta);
    H(1,2)=1/cos(theta);
    H(1,3)=vi/vj/cos(theta);
    H(1,4)=vi/vk/cos(theta);
    H(2,1)=-vi/sin(theta);
    H(2,2)=vj/vi/cos(theta);
    H(2,3)=1/cos(theta);
    H(2,4)=vj/vk/cos(theta);
    H(3,1)=-vk/sin(theta);
    H(3,2)=vk/vi/cos(theta);
    H(3,3)=vk/vj/cos(theta);
    H(3,4)=1/cos(theta);
else
%     vi=0;
%     vj=0;
%     vk=0;
    H(1,2)=1;
    H(2,3)=1;
    H(3,4)=1;
end
H=H/2;
H(4:6,11:13)=Rotm.';
end
%% funct march time
function [q,r,v,a]=March_time(q0,v0,r0,accBody,w,dt)
w_norm=norm(w);
if norm(w/w_norm) > 1+eps & w_norm ~= 0
    disp('angular velocity is too small');
    return;
end
if w_norm~=0
    integrator0=quaternion(cos(w_norm/2*dt),w(1)/w_norm*sin(w_norm/2*dt),w(2)/w_norm*sin(w_norm/2*dt),w(3)/w_norm*sin(w_norm/2*dt));
else
    integrator0=quaternion(1,0,0,0);
end
q=quatmultiply(integrator0,q0);

R0=quat2rotm(q0);
a=R0*accBody.';
a=a.';
v=v0+a*dt;

r=r0+v0*dt+1/2*a*dt*dt;

end
